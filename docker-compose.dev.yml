# ==========================================
# DOCKER COMPOSE - DESENVOLVIMENTO
# ==========================================

services:
  # Banco de dados PostgreSQL (Desenvolvimento)
  db:
    build:
      context: .
      dockerfile: Dockerfile
      target: postgres
    image: simuladores-postgres:dev
    container_name: simuladores_db_dev
    restart: unless-stopped
    env_file:
      - .env.development
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-simuladores_dev}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - simuladores_postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_EXTERNAL_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-simuladores_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Aplicação Next.js (Desenvolvimento)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: development
    image: simuladores-app:dev
    container_name: simuladores_app_dev
    restart: unless-stopped
    env_file:
      - .env.development
    ports:
      - "${APP_PORT:-3000}:${PORT:-3000}"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      RESEND_API_KEY: ${RESEND_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT:-3000}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      ENABLE_DEBUG_ROUTES: ${ENABLE_DEBUG_ROUTES:-true}
      ENABLE_TEST_DATA: ${ENABLE_TEST_DATA:-true}
    # Volumes removidos para evitar problemas de permissão com Podman
    # Os arquivos já estão copiados na imagem Docker
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PgAdmin (Desenvolvimento)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: simuladores_pgadmin_dev
    restart: unless-stopped
    env_file:
      - .env.development
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-dev@simuladores.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-dev123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    depends_on:
      - db
    networks:
      - app-network
    profiles:
      - admin

volumes:
  simuladores_postgres_dev_data:
    name: simuladores_postgres_dev_data
    driver: local

networks:
  app-network:
    name: simuladores_network_dev
    driver: bridge
services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: simuladores_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: simuladores_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d simuladores_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Aplicação Next.js
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: simuladores_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres_password@db:5432/simuladores_db
      NEXTAUTH_SECRET: your_nextauth_secret_here_change_in_production
      NEXTAUTH_URL: http://localhost:3000
      RESEND_API_KEY: ${RESEND_API_KEY:-your_resend_api_key}
      PORT: 3000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PgAdmin (opcional, para administração do banco)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: simuladores_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@simuladores.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - app-network
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge

# ==========================================
# DOCKER COMPOSE - PRODUÇÃO
# ==========================================

services:
  # Banco de dados PostgreSQL (Produção)
  db:
    build:
      context: ./database
      dockerfile: Dockerfile.postgres
    image: simuladores-postgres:prod
    container_name: simuladores_db_prod
    restart: always
    env_file:
      - .env.production
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - simuladores_postgres_prod_data:/var/lib/postgresql/data
      # Backup automático (opcional)
      - ./backups:/backups
    # Não expor porta em produção (apenas interno)
    # ports:
    #   - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Limites de recursos para produção
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Aplicação Next.js (Produção)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    image: simuladores-app:prod
    container_name: simuladores_app_prod
    restart: always
    env_file:
      - .env.production
    ports:
      - "${APP_PORT:-3000}:${PORT:-3000}"
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      RESEND_API_KEY: ${RESEND_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      PORT: ${PORT:-3000}
      DEBUG: false
      LOG_LEVEL: ${LOG_LEVEL:-error}
      ENABLE_DEBUG_ROUTES: false
      ENABLE_TEST_DATA: false
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}/api/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 120s
    # Limites de recursos para produção
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nginx (Reverse Proxy para Produção)
  nginx:
    image: nginx:alpine
    container_name: simuladores_nginx_prod
    restart: always
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network
    profiles:
      - nginx

  # PgAdmin (Produção - apenas com profile admin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: simuladores_pgadmin_prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'True'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    depends_on:
      - db
    networks:
      - app-network
    profiles:
      - admin
    # Limites de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

volumes:
  simuladores_postgres_prod_data:
    name: simuladores_postgres_prod_data
    driver: local

networks:
  app-network:
    name: simuladores_network_prod
    driver: bridge